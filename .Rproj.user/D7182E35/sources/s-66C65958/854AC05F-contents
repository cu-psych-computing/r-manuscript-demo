###### RES Manuscript #####

# Script for functions and loading libraries for use in all study-specific files

####### Packages ########
library(brms)
library(psych)
library(car)
library(papaja)
library(lavaan)
library(semPlot)
library(lme4)
library(lmerTest)
library(rmcorr)
library(tidyverse)
library(tidylog)
library(broom)
library(gdata)
library(ggthemes)
library(gridExtra)
library(data.table)

#### Functions #####


##### Mean Centering ####
center <- function (x) 
{
  scale(x, center = T, scale = F)
}


##### Mean, removing NAs #####
mean.na <- function (x) {
  out <- mean(x, na.rm=T)
  out
}


##### Sum, removing NAs #####
sum.na <- function (x) {
  out <- sum(x, na.rm=T)
  out
}


###### Variance Inflation Factor ######
vif.mer <- function (fit) {
  ## adapted from rms::vif
  v <- vcov(fit)
  nam <- names(fixef(fit))
  
  ## exclude intercepts
  ns <- sum(1 * (nam == "Intercept" | nam == "(Intercept)"))
  if (ns > 0) {
    v <- v[-(1:ns), -(1:ns), drop = FALSE]
    nam <- nam[-(1:ns)]
  }
  
  d <- diag(v)^0.5
  v <- diag(solve(v/(d %o% d)))
  names(v) <- nam
  v
}






###### Spearman Brown's rho ###### 
spearmanb <- function(x, y) {
c <- cor(x, y, use="pairwise.complete.obs")
spc <- (2 * c / (1 + c)) # same as splithalf reliability
return(spc=spc)

}




#### Selectively round to 3 digits #####
roundto3 <- function(x) {
  noquote(ifelse(abs(x) < .01, 
                 format(round(x, 3), nsmall = 3),
                 format(round(x, 2), nsmall = 2)))
}


###### diff in coefficients #######


# Need to deal with coeff names
getdiff <- function(m, dv, resvar, pprvar) {
  resvarname <- noquote(paste("b_", resvar, sep = ""))
  pprvarname <- noquote(paste("b_", pprvar, sep = ""))
  mp <- as.data.frame(posterior_samples(m))
  res_post <- dplyr::select(mp, resvarname)
  ppr_post <- dplyr::select(mp, pprvarname)
  diff <- as.data.frame(res_post - ppr_post)[,1]
  diffq <- quantile(diff, probs = c(.025, .975))
  diffq90 <- quantile(diff, probs = c(.05, .95))
  df <- data.frame(
    dv = dv,
    res_minus_pr = ifelse(abs(mean(diff)) < .01, 
                          format(round(mean(diff), 3), nsmall = 3), 
                          format(round(mean(diff), 2), nsmall = 2)),
    
    se = ifelse(abs(sd(diff)) < .01, 
                format(round(sd(diff), 3), nsmall = 3), 
                format(round(sd(diff), 2), nsmall = 2)),
    
    lwr = ifelse(abs(diffq[1]) < .01, 
                 format(round(diffq[1], 3), nsmall = 3), 
                 format(round(diffq[1], 2), nsmall = 2)),
    
    upr = ifelse(abs(diffq[2]) < .01, 
                 format(round(diffq[2], 3), nsmall = 3),
                 format(round(diffq[2], 2), nsmall = 2)),
    
    lwr90 = ifelse(abs(diffq90[1]) < .01, 
                   format(round(diffq90[1], 3), nsmall = 3),
                   format(round(diffq90[1], 2), nsmall = 2)),
    
    upr90 = ifelse(abs(diffq90[2]) < .01, 
                   format(round(diffq90[2], 3), nsmall = 3),
                   format(round(diffq90[2], 2), nsmall = 2))
    
  ) 
  row.names(df) <- c()
  return(list(summary = df, diffpost = diff))
}


# getdiff(s5neg, "neg", resvar = "ress.wc", pprvar = "ppr.wc")$summary




###### brms lm and mlm table #######

blm_table <- function(x, id) {
  library(broom)
  modtidy <- as.data.frame(fixef(x))
  modtidy$term <- row.names(modtidy)
  # modtidy$var <- ifelse(modtidy$term == "Intercept", colnames(x$data)[1], " ")
  modtidy$var <- colnames(x$data)[1]

  modtidy$Estimate <- ifelse(abs(modtidy$Estimate) < .01, format(round(modtidy$Estimate, 3), nsmall = 3),
                             format(round(modtidy$Estimate, 2), nsmall = 2))
  
  modtidy$SE <- ifelse(abs(modtidy$Est.Error) < .01, format(round(modtidy$Est.Error, 3), nsmall = 3),
                       format(round(modtidy$Est.Error, 2), nsmall =2))
  
  modtidy$Lower <- ifelse(abs(modtidy$Q2.5) < .01, format(round(modtidy$Q2.5, 3), nsmall = 3), 
                          format(round(modtidy$Q2.5, 2), nsmall = 2))
  
  
  modtidy$Upper <- ifelse(abs(modtidy$Q97.5) < .01, format(round(modtidy$Q97.5, 3), nsmall = 3), 
                          format(round(modtidy$Q97.5, 2), nsmall = 2))
  
  modtidy90 <- as.data.frame(fixef(x, prob = c(.05, .95)))
  modtidy$Lower90 <- ifelse(abs(modtidy90$Q5) < .01, format(round(modtidy90$Q5, 3), nsmall = 3), 
                            format(round(modtidy90$Q5, 2), nsmall = 2))
  
  modtidy$Upper90 <- ifelse(abs(modtidy90$Q95) < .01, format(round(modtidy90$Q95, 3), nsmall = 3), 
                            format(round(modtidy90$Q95, 2), nsmall = 2))
  
  modtidy$N_Subj <- ifelse( length(unique(x$data$id)) == 0, nrow(x$data), length(unique(x$data$id)))
  modtidy$N_Obs <- nobs(x)
#   
#   ## adding 191115
#   require(stringr)
#   modtidy$hyp <-  ifelse(modtidy$estimate < 0, paste(str_remove(modtidy$term, "b_"), " < 0", sep = ""),
#                  paste(str_remove(modtidy$term, "b_"), " > 0", sep = ""))
# #  
# #  negprob <- hypothesis(x, neghyp)$hypothesis$Post.Prob
# #  posprob <- hypothesis(x, poshyp)$hypothesis$Post.Prob
# #  
#   modtidy$prob0 <-  hypothesis(x, modtidy$hyp)$hypothesis$Post.Prob
#   
  modtidy <- dplyr::select(modtidy, var, term, Estimate, SE, Lower, Upper, Lower90, Upper90, N_Subj, N_Obs)
  
  row.names(modtidy) <- c()
  return(modtidy)
  
}

#blm_table(s7supeff)



###### brms ranef table #######

branef_table <- function(x) {
  require(broom)
  modtidy <- tidy(x, prob = .95)
  modtidy$dv <- colnames(x$data)[1]
  
  
  modtidy$Estimate <- ifelse(abs(modtidy$estimate) < .01, 
                             format(round(modtidy$estimate, 3), nsmall = 3),
                             format(round(modtidy$estimate, 2), nsmall = 2))
  
  modtidy$SE <- ifelse(abs(modtidy$std.error) < .01, 
                       format(round(modtidy$std.error, 3), nsmall = 3), 
                       format(round(modtidy$std.error, 2), nsmall = 2))
  
  modtidy$Lower <- ifelse(abs(modtidy$lower) < .01, 
                          format(round(modtidy$lower, 3), nsmall = 3),
                          format(round(modtidy$lower, 2), nsmall = 2))
  
  modtidy$Upper <- ifelse(abs(modtidy$upper) < .01, 
                          format(round(modtidy$upper, 3), nsmall = 3), 
                          format(round(modtidy$upper, 2), nsmall = 2))

  
  modtidy$Lower90 <- ifelse(abs(tidy(x, prob = .90)[, "lower"]) < .01, 
                          format(round(tidy(x, prob = .90)[, "lower"], 3), nsmall = 3),
                          format(round(tidy(x, prob = .90)[, "lower"], 2), nsmall = 2))

  modtidy$Upper90 <- ifelse(abs(tidy(x, prob = .90)[, "upper"]) < .01, 
                            format(round(tidy(x, prob = .90)[, "upper"], 3), nsmall = 3),
                            format(round(tidy(x, prob = .90)[, "upper"], 2), nsmall = 2))
  modtidy2 <- dplyr::select(modtidy, dv, term, Estimate, SE, Lower, Upper, Lower90, Upper90)
  row.names(modtidy2) <- c()
  
  top <- which(modtidy2$term == "sd_id__Intercept")
  bottom <- which(modtidy2$term == "sigma")
  modtidy3 <- modtidy2[top:bottom, ]
  ar_row <- which(modtidy2$term == "ar[1]")
  ar_df <- modtidy2[ar_row, ] 
  ar_df$term <- "AR(1)"
  modtidy4 <- rbind(modtidy3, ar_df)
return(print(modtidy4, row.names = F))
}


####### For correlations matrix ######
corsig <- function(x){
  newx <- ifelse(x$p < .001, noquote(paste(format(round(x$r, digits = 2), nsmall=2), "***", sep = "")),
                 ifelse(x$p < .01, noquote(paste(format(round(x$r, digits = 2), nsmall=2), "**", sep = "")),
                        ifelse(x$p < .05, noquote(paste(format(round(x$r, digits = 2), nsmall=2), "*", sep = "")),
                               noquote(paste(format(round(x$r, digits =2), nsmall= 2), "", sep = "")))))
  print(noquote(newx))
  
}


###### Summary for Meta Analysis #######
# study = study number
# m = model object name
# dv = name of dv
# prvar = name of PR predictor variable
# resvar = name of RES predictor variable


####### brms meta ########

# brms version
brmmeta <- function(study, m, diff, dv, prvar, resvar){
  require(brms)
  namedf <- data.frame(
    study = study,
    dv = dv,
    ppr = ifelse(abs(fixef(m)[prvar, "Estimate"]) < .01, 
                 format(round(fixef(m)[prvar, "Estimate"], digits = 3), nsmall = 3),
                 format(round(fixef(m)[prvar, "Estimate"], digits = 2), nsmall = 2)), # effect size
    
    ppr_se = ifelse(abs(fixef(m)[prvar, "Est.Error"]) < .01, 
                    format(round(fixef(m)[prvar, "Est.Error"], digits = 3), nsmall = 3),
                    format(round(fixef(m)[prvar, "Est.Error"], digits = 2), nsmall = 2)),
    
    ress = ifelse(abs(fixef(m)[resvar, "Estimate"]) < .01, 
                  format(round(fixef(m)[resvar, "Estimate"], digits = 3), nsmall = 3),
                  format(round(fixef(m)[resvar, "Estimate"], digits = 2), nsmall = 2)), # effect size
    
    ress_se = ifelse(abs(fixef(m)[resvar, "Est.Error"]) < .01, 
                     format(round(fixef(m)[resvar, "Est.Error"], digits = 3), nsmall = 3),
                     format(round(fixef(m)[resvar, "Est.Error"], digits = 2), nsmall = 2)),
    diff = diff$summary[1, "res_minus_pr"],
    diff_se = diff$summary[1, "se"]
    
  )
  row.names(namedf) <- c()
  return(namedf)  
  
}





##### Density Plots ######
postdensplot <- function(m, resvar, prvar, name1, name2){
  require(brms)
  require(dplyr)
  resvarname <- noquote(paste("b_", resvar, sep = ""))
  pprvarname <- noquote(paste("b_", prvar, sep = ""))
  mp <- as.data.frame(posterior_samples(m))
  res_post <- dplyr::select(mp, resvarname)
  ppr_post <- dplyr::select(mp, pprvarname)
  diff <- as.data.frame(res_post - ppr_post)
  
  mpost_ress <- data.frame(post = res_post, Coefficient = name1)
  colnames(mpost_ress) <- c("post", "Coefficient")
  mpost_ppr <- data.frame(post = ppr_post, Coefficient = name2)
  colnames(mpost_ppr) <- c("post", "Coefficient")
  mpost_diff <- data.frame(post = diff, Coefficient = paste(name1, name2, sep = "-"))
  colnames(mpost_diff) <- c("post", "Coefficient")
  mpost_long_df <- rbind(mpost_ress, mpost_ppr, mpost_diff)
  mpost_long_df <- mpost_long_df %>% group_by(Coefficient) %>% 
    mutate(post_mean = mean(post), 
           post_lwr = quantile(post, probs = .025),
           post_upr = quantile(post, probs = .975),
           post_lwr90 = quantile(post, probs = .05),
           post_upr90 = quantile(post, probs = .95)) %>% ungroup()
  
  require(ggplot2)
  myplot <- ggplot(mpost_long_df, aes(x = post, fill = Coefficient)) +
    geom_density(color = "white", alpha = .5) +
    geom_vline(xintercept = 0, color = "gray50", linetype = "dashed") +
    labs(x = "\nCoefficient", y = "Density\n") +
    scale_fill_manual(values = c("blue", "red", "gray30")) +
    scale_color_manual(values = c("blue3", "red3", "gray30")) +
    geom_segment(aes(x=post_lwr, xend=post_upr, y=.05, yend=.05, color = Coefficient), size = .2, alpha = .7) +
    #geom_segment(aes(x=post_lwr90, xend=post_upr90, y=.05, yend=.05, color = Coefficient), size = .8, alpha = .5) +
    geom_point(aes(x = post_mean, y = 0.05, color = Coefficient), size = 1, alpha = .8) +
    theme_bw() +
    theme(text=element_text(size=10)) +
    theme(legend.position="none") +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
    facet_wrap(~Coefficient, ncol = 1, strip.position="top")
  return(myplot)
  
}


###### in line statistics #####
txt <- function(model, est) {
  b <- "*b* = "
  se <- "*SE* = "
  lwr <- "95% CI ["
  upr <- "]"
  bval <- fixef(model)[est, "Estimate"]
  seval <- fixef(model)[est, "Est.Error"]
  lwrval <- fixef(model)[est, "Q2.5"]
  uprval <- fixef(model)[est, "Q97.5"]
  
  noquote(paste(b, ifelse(abs(mean(bval)) < .01, 
                  format(round(mean(bval), 3), nsmall = 3), 
                  format(round(mean(bval), 2), nsmall = 2)),
        ", ",
       # se, ifelse(abs(mean(seval)) < .01, 
       #            format(round(mean(seval), 3), nsmall = 3), 
       #            format(round(mean(seval), 2), nsmall = 2)),
       # ", ", 
        
        lwr, ifelse(abs(mean(lwrval)) < .01, 
                    format(round(mean(lwrval), 3), nsmall = 3), 
                    format(round(mean(lwrval), 2), nsmall = 2)),
        ", ", 
        
        ifelse(abs(mean(uprval)) < .01, 
               format(round(mean(uprval), 3), nsmall = 3), 
               format(round(mean(uprval), 2), nsmall = 2)),   upr,
        
        sep = ""))
  
  
}



txt2 <- function(sumdf, pred, dv) {
  b <- "*b* = "
  se <- "*SE* = "
  lwr <- "95% CI ["
  upr <- "]"
  newdf <- subset(sumdf, term == pred & var == dv)
  bval <- newdf$Estimate
  seval <- newdf$SE
  lwrval <- newdf$Lower
  uprval <- newdf$Upper
 newdf 

  noquote(paste(b, bval,
                ", ",
                se, seval,
                ", ", 
                
                lwr, lwrval,
                ", ", 
                
                uprval,   upr,
                
                sep = ""))
  
  
}




txt90 <- function(model, est){
  lwr90 <- fixef(model, prob = c(.05, .95))[est, "Q5"]
  upr90 <- fixef(model, prob = c(.05, .95))[est, "Q95"]
  
  lwr90val <- ifelse(abs(mean(lwr90)) < .01, 
         format(round(mean(lwr90), 3), nsmall = 3), 
         format(round(mean(lwr90), 2), nsmall = 2))
  
  upr90val <- ifelse(abs(mean(upr90)) < .01, 
                     format(round(mean(upr90), 3), nsmall = 3), 
                     format(round(mean(upr90), 2), nsmall = 2))
  
  
  noquote(paste("90% CI [", lwr90val, ", ", upr90val, "]", sep = ""))
}



difftxt <- function(diff) {
  b <- "*b* = "
  se <- "*SE* = "
  lwr <- "95% CI ["
  upr <- "]"

  noquote(paste(b, diff$summary$res_minus_pr,
                ", ",
                #se, diff$summary$se,
                #", ", 
                
                lwr, diff$summary$lwr,
                ", ", 
                
                diff$summary$upr,   upr,
                
                sep = ""))
}


difftxt90 <- function(diff) {
  lwr <- "90% CI ["
  upr <- "]"
  noquote(paste(lwr, diff$summary$lwr90,
                ", ", 
                diff$summary$upr90,   upr,
                sep = ""))
}




####### brms correlations table summary function #####

clean_cor <- function(x){
  require(dplyr)
  require(broom)
  require(data.table)
  xsum <- tidy(x, prob = .95)
  xsum <- subset(xsum, term != "lp__")
  xsum <- xsum %>%  mutate_if(is.numeric, funs(round(., digits = 2)))
  xsum2 <- xsum[xsum$term %like% "rescor", ]
  
  xsum2$term <- gsub(".*rescor__", "", xsum2$term)
  colnames(xsum2) <- c("Variables", "Estimate", "SE", "Lower", "Upper")
  
  xsum2 <- xsum2 %>% 
    mutate(
      order = ifelse(Variables %like% "ressz__", 1,
                     ifelse(Variables %like% "pprz__", 2,
                            ifelse(Variables %like% "supeffz__", 3,
                            ifelse(Variables %like% "negz__", 4, 
                                   ifelse(Variables %like% "posz__", 5,
                                          ifelse(Variables %like% "iosz__", 6, 7))))))) %>% 
    arrange(order) %>% 
    select(-order)

  return(xsum2)
}



#### CFA results short cut #####
cfa.txt <- function(CFI, RMSEA, lwr, upr) {
  noquote(paste("CFI = ", CFI, ", ", "RMSEA = ", RMSEA, ", ", "90% [", format(lwr, nsmall = 2), ", ", upr, "]", sep = ""))
  
}


##### model comparison short cut #####


compare.txt <- function(x){
  noquote(paste(
  format(round(x[2,5], 2), nsmall = 2), 
  ", ", "*p* ", "< ", ifelse(x[2,7] < .001, .001, format(round(x[2,7], 3), nsmall = 3)),
  sep = ""))
}

###### frequentist versions #####

# lm version
kzregtable <- function(x) {
  library(broom)
  modtidy <- tidy(x)
  citidy <- tidy(confint(x))
  citidy$term <- citidy[,1]
  tidymerged <- merge(modtidy, citidy, by = "term")
  tidymerged$var <- paste(x$terms)[2]
  tidymerged$df <- x$df.residual
  colnames(tidymerged) <- c("term", "estimate", "std.error", "t.value", 
                            "p.value", "term2", "lower", "upper", "var", "df")
  tidymerged$p.round <- ifelse(tidymerged$p.value < .001, "<.001", format(round(tidymerged$p.value, digits =3), nsmall = 3))
  tidymerged$estimate.round <-  format(round(tidymerged$estimate, digits =2), nsmall = 2)
  tidymerged$t.value.round <- format(round(tidymerged$t.value, digits =2), nsmall = 2)
  tidymerged$lower.round <- format(round(tidymerged$lower, digits =2), nsmall = 2)
  tidymerged$upper.round <- format(round(tidymerged$upper, digits = 2), nsmall = 2)
  tidymerged$std.error.round <- format(round(tidymerged$std.error, digits = 2), nsmall = 2)
  tidymerged$r <- sqrt(tidymerged$t.value^2/(tidymerged$t.value^2+tidymerged$df))
  tidymerged$err <- (1/sqrt(nobs(x)-3))
  tidymerged$r.round <- format(round(tidymerged$r, digits = 2), nsmall = 2)
  tidymerged$err.round <- format(round(tidymerged$err, digits = 2), nsmall = 2)
  tidymerged2 <- dplyr::select(tidymerged, var, term, estimate.round, std.error.round, t.value.round, df, p.round,
                               lower.round, upper.round, r.round, err.round)
  colnames(tidymerged2) <- c("var", "term", "estimate", "se", "t", "df", "p", "lwr", "upr", "r", "err")
  print(tidymerged2)
}


# lmer version - fixed effects
kzmlmtable <- function(x) {
  library(broom)
  modtidy <- tidy(summary(x)$coef)
  modtidy$term <- modtidy$.rownames
  citidy <- tidy(confint(x))
  citidy$term <- citidy[,1]
  tidymerged <- merge(modtidy, citidy, by = "term")
  tidymerged$var <- deparse(substitute(x))
  colnames(tidymerged) <-c("term", "term2", "estimate", "std.error", "df", "t.value",  "p.value",
                           "term3",  "lower", "upper", "var")
  tidymerged$p.round <- ifelse(tidymerged$p.value < .001, "<.001", format(round(tidymerged$p.value, digits =3), nsmall = 3))
  tidymerged$estimate.round <-  format(round(tidymerged$estimate, digits =2), nsmall = 2)
  tidymerged$t.value.round <- format(round(tidymerged$t.value, digits =2), nsmall = 2)
  tidymerged$lower.round <- format(round(tidymerged$lower, digits =2), nsmall = 2)
  tidymerged$upper.round <- format(round(tidymerged$upper, digits = 2), nsmall = 2)
  tidymerged$df.round <- round(tidymerged$df, digits = 0)
  #tidymerged$std.error.round <- sprintf('%.2f', round(tidymerged$std.error, digits = 2))
  tidymerged$std.error.round <- format(round(tidymerged$std.error, digits = 2), nsmall = 2)
  tidymerged$r <- sqrt((tidymerged$t.value^2)/((tidymerged$t.value^2)+tidymerged$df))
  tidymerged$err <- (1/sqrt(summary(x)$ngrps-3))
  tidymerged$r.round <- format(round(tidymerged$r, digits = 2), nsmall = 2)
  tidymerged$err.round <- format(round(tidymerged$err, digits = 2), nsmall = 2)
  
  tidymerged2 <- dplyr::select(tidymerged, var, term, estimate.round, std.error.round, t.value.round, df.round, p.round,
                               lower.round, upper.round, r.round, err.round)
  colnames(tidymerged2) <- c("var", "term", "estimate", "se", "t", "df", "p", "lwr", "upr", "r", "err")
  print(tidymerged2)
}


# lmer version - random effects
kzraneftable <- function(x) {
  library(broom)
  modtidy <- tidy(summary(x)$varcor)
  modtidy$term1 <- paste(modtidy$var1, modtidy$var2, sep = "_", collapse = NULL)
  modtidy$term <- c("inter","slope", "intslope", "resid") 
  require(dplyr)
  modtidy2 <- dplyr::select(modtidy, term, sdcor)
  citidy <- tidy(confint(x))
  citidy <- citidy[1:4, ]
  citidy$term <- c("inter", "intslope", "slope", "resid") 
  tidymerged <- dplyr::full_join(modtidy2, citidy, by = "term")
  tidymerged$var <- deparse(substitute(x))
  tidymerged$sd <- sprintf('%.2f', round(tidymerged$sdcor, digits =2))
  tidymerged$lower <- sprintf('%.2f', round(tidymerged$X2.5, digits =2))
  tidymerged$upper <- sprintf('%.2f', round(tidymerged$X97.5, digits = 2))
  tidymerged <- dplyr::select(tidymerged, var, term, sd, lower, upper)
  print(tidymerged)
}



####### Difference in Coefficients ######

# lm version
difftest_lm <- function(x1, x2, model){
  diffest <- summary(model)$coef[x1,"Estimate"]-summary(model)$coef[x2,"Estimate"]
  vardiff <- (summary(model)$coef[x1,"Std. Error"]^2 + 
                summary(model)$coef[x2,"Std. Error"]^2) - (2*(vcov(model)[x1, x2])) 
  # variance of x1 + variance of x2 - 2*covariance of x1 and x2
  diffse <- sqrt(vardiff)
  tdiff <- (diffest)/(diffse)
  ptdiff <- 2*(1-pt(abs(tdiff), model$df, lower.tail=T))
  upr <- diffest + 1.96*diffse
  lwr <- diffest - 1.96*diffse 
  df <- model$df
  return(list(est=round(diffest, digits =2), 
              t=round(tdiff, digits = 2), 
              p=round(ptdiff, digits = 4), 
              lwr=round(lwr, digits = 2), 
              upr=round(upr, digits = 2),
              df = df))
}


# lmer version 
difftest_lmer <- function(x1, x2, model){
  diffest <- summary(model)$coef[x1,"Estimate"]-summary(model)$coef[x2,"Estimate"]
  vardiff <- (summary(model)$coef[x1,"Std. Error"]^2 + 
                summary(model)$coef[x2,"Std. Error"]^2) - (2*(vcov(model)[x1, x2])) 
  # variance of x1 + variance of x2 - 2*covariance of x1 and x2
  diffse <- sqrt(vardiff)
  tdiff <- (diffest)/(diffse)
  ptdiff <- 2*(1-pt(abs(tdiff), summary(model)$coef[x1,"df"], lower.tail=T))
  upr <- diffest + 1.96*diffse
  lwr <- diffest - 1.96*diffse 
  df <- summary(model)$coef[x1,"df"]
  return(list(est=round(diffest, digits =2), 
              t=round(tdiff, digits = 2), 
              p=round(ptdiff, digits = 4), 
              lwr=round(lwr, digits = 2), 
              upr=round(upr, digits = 2),
              df = round(df, digits = 0)))
}




####